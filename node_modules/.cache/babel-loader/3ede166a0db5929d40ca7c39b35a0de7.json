{"ast":null,"code":"import Axios from 'axios';\nexport const BASE_URL = process.env.NODE_ENV === 'production' ? 'https://mighty-forest-94147.herokuapp.com/' : 'https://localhost:3001';\nconst Client = Axios.create({\n  baseURL: BASE_URL\n}); //intercepts every request axios makes\n\nClient.interceptors.request.use(config => {\n  // Reads the token in localStorage\n  const token = localStorage.getItem('token'); // if the token exists, we set the authorization header\n\n  if (token) {\n    config.headers['authorization'] = `Bearer ${token}`;\n  }\n\n  return config; // We return the new config if the token exists or the default config if no token exists.\n  // Provides the token to each request that passes through axios\n}, error => Promise.reject(error));\nexport default Client;","map":{"version":3,"sources":["/Users/neo/seir222/unit3/pweek3/Foodle-Front/client/src/services/api.js"],"names":["Axios","BASE_URL","process","env","NODE_ENV","Client","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAClB,4CADkB,GAElB,wBAFC;AAIP,MAAMC,MAAM,GAAGL,KAAK,CAACM,MAAN,CAAa;AAAEC,EAAAA,OAAO,EAAEN;AAAX,CAAb,CAAf,C,CAEA;;AACAI,MAAM,CAACG,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CACKC,MAAD,IAAU;AACN;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAFM,CAGN;;AACA,MAAIF,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACI,OAAP,CAAe,eAAf,IAAmC,UAASH,KAAM,EAAlD;AACH;;AACD,SAAOD,MAAP,CAPM,CAOQ;AACd;AACH,CAVL,EAWKK,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAXf;AAcA,eAAeX,MAAf","sourcesContent":["import Axios from 'axios'\n\nexport const BASE_URL = process.env.NODE_ENV === 'production' \n    ? 'https://mighty-forest-94147.herokuapp.com/' \n    : 'https://localhost:3001'\n\nconst Client = Axios.create({ baseURL: BASE_URL })\n\n//intercepts every request axios makes\nClient.interceptors.request.use(\n    (config)=>{\n        // Reads the token in localStorage\n        const token = localStorage.getItem('token')\n        // if the token exists, we set the authorization header\n        if (token) {\n            config.headers['authorization'] = `Bearer ${token}`\n        }\n        return config // We return the new config if the token exists or the default config if no token exists.\n        // Provides the token to each request that passes through axios\n    },\n    (error) => Promise.reject(error)\n)\n\nexport default Client\n"]},"metadata":{},"sourceType":"module"}